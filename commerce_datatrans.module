<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for testing and
 *   development.
 */

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_datatrans_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_datatrans'] = array(
    'method_id' => 'commerce_datatrans',
    'display_title' => t('Datatrans'),
    'title' => t('Datatrans'),
    'description' => t('Redirect users to submit payments through Datatrans.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );

  return $payment_methods;
}

/**
 * Payment method callback; return the settings form for a payment method.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A form snippet.
 */
function commerce_datatrans_settings_form($settings = NULL) {

  $settings += array(
    'merchant_id' => '1000011011',
    'up_start_url' => 'https://pilot.datatrans.biz/upp/jsp/upStart.jsp',
    'req_type' => 'CAA',
    'payment_mode' => 'redirect',
    'security' => array(),
  );
  if (!isset($settings['security']) || !is_array($settings['security'])) {
    $settings['security'] = array();
  }
  $settings['security'] += array(
    'security_level' => 2,
    'merchant_control_constant' => '',
    'hmac_key' => '',
    'hmac_key_2' => '',
    'use_hmac_2' => FALSE,
  );

  $form['merchant_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant-ID'),
    '#default_value' => $settings['merchant_id'],
    '#required' => TRUE,
  );

  $form['up_start_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Start URL'),
    '#default_value' => $settings['up_start_url'],
    '#required' => TRUE
  );

  $form['req_type'] = array(
    '#type' => 'select',
    '#title' => t('Request Type'),
    '#options' => array(
      'NOA' => t('Authorization only'),
      'CAA' => t('Authorization with immediate settlement'),
      'ignore' => t('According to the setting in the Web Admin Tool'),
    ),
    '#default_value' => $settings['req_type'],
  );

  $form['payment_mode'] = array(
    '#type' => 'select',
    '#title' => t('Payment Mode'),
    '#options' => array(
      'redirect' => t('Redirect'),
      'lightbox' => t('Lightbox'),
    ),
    '#default_value' => $settings['payment_mode'],
  );

  $form['security'] = array(
    '#type' => 'fieldset',
    '#title' => t('Security Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#description' => t('You should not work with anything else than security level 2 on a productive system. Without the HMAC key there is no way to check whether the data really commes from Datatrans.') . PHP_EOL .
                      t('You can find more details about the security levels in your Datatrans account at UPP ADMINISTRATION -> Security. Or check the tecnical information in the ').
    l('Technical_Implementation_Guide', 'https://pilot.datatrans.biz/showcase/doc/Technical_Implementation_Guide.pdf', array('external' => TRUE)),
  );

  $form['security']['security_level'] = array(
    '#type' => 'select',
    '#title' => t('Security Level'),
    '#options' => array(
      '0' => t('Level 0. No additional security element will be send with payment messages. (not recommended)'),
      '1' => t('Level 1. An additional Merchant-IDentification will be send with payment messages'),
      '2' => t('Level 2. Important parameters will be digitally signed (HMAC-MD5) and sent with payment messages'),
    ),
    '#default_value' => $settings['security']['security_level'],
  );

  $form['security']['merchant_control_constant'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant control constant'),
    '#default_value' => $settings['security']['merchant_control_constant'],
    '#description' => t('Used for security level 1'),
  );

  $form['security']['hmac_key'] = array(
    '#type' => 'textfield',
    '#title' => t('HMAC Key'),
    '#default_value' => $settings['security']['hmac_key'],
    '#description' => t('Used for security level 2'),
  );

  $form['security']['use_hmac_2'] = array(
    '#type' => 'checkbox',
    '#title' => 'Use HMAC 2',
    '#default_value' => $settings['security']['use_hmac_2'],
  );

  $form['security']['hmac_key_2'] = array(
    '#type' => 'textfield',
    '#title' => t('HMAC Key 2'),
    '#default_value' => $settings['security']['hmac_key_2'],
    '#description' => t('Used for security level 2'),
  );

  return $form;
}

function commerce_datatrans_redirect_form($form, &$form_state, $order, $payment_method) {

  global $language;

  if (!_commerce_datatrans_settings_ok($payment_method['settings'])) {
    return;
  }

  $total = field_get_items('commerce_order', $order, 'commerce_order_total');

  // Datatrans get default gateway.
  $form['#action'] = $payment_method['settings']['up_start_url'];

  // MerchantId, mandatory.
  $form['merchantId'] = array(
    '#type' => 'hidden',
    '#value' => $payment_method['settings']['merchant_id'],
  );
  // Language of the payment.
  $form['language'] = array(
    '#type' => 'hidden',
    '#value' => $language->language,
  );
  // Request Type.
  $form['reqtype'] = array(
    '#type' => 'hidden',
    '#value' => $payment_method['settings']['req_type'],
  );
  // The total amount
  $form['amount'] = array(
    '#type' => 'hidden',
    '#value' => $total[0]['amount'],
  );
  // The currency
  $form['currency'] = array(
    '#type' => 'hidden',
    '#value' => $total[0]['currency_code'],
  );
  // Reference Number.
  $form['refno'] = array(
    '#type' => 'hidden',
    '#value' => $order->order_id,
  );

  switch ($payment_method['settings']['security']['security_level']) {
    case 1:
      $form['sign'] = array(
        '#type' => 'hidden',
        '#value' => $payment_method['settings']['security']['merchant_control_constant'],
      );
      break;
    case 2:
      $form['sign'] = array(
        '#type' => 'hidden',
        '#value' => hash_hmac('md5', $payment_method['settings']['merchant_id'] . $total[0]['amount'] . $total[0]['currency_code'] . $order->order_id, pack("H*", $payment_method['settings']['security']['hmac_key'])),
      );
      break;
  }

  $form['successUrl'] = array(
    '#type' => 'hidden',
    '#value' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );
  $form['errorUrl'] = array(
    '#type' => 'hidden',
    '#value' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );
  $form['cancelUrl'] = array(
    '#type' => 'hidden',
    '#value' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
  );

  // Submit button.
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to Datatrans'),
    '#weight' => 50,
  );
  return $form;
}

/**
 * Payment method callback; validation callback for redirected payments.
 *
 * Upon return from a redirected payment service, this callback provides the
 * payment method an opportunity to validate any returned data before proceeding
 * to checkout completion; should return TRUE or FALSE indicating whether or not
 * the customer should proceed to checkout completion or go back a step in the
 * checkout process from the payment page.
 *
 * @param $order
 *   The order object.
 * @param $payment_method
 *   The payment method array.
 * @return
 *   TRUE if the customer should proceed to checkout completion or FALSE to go
 *   back one step in the checkout process.
 */
function commerce_datatrans_redirect_form_validate($order, $payment_method) {
  if (!is_array($_POST)) {
    drupal_set_message(t('Datatrans communication failure. Invalid data received from datatrans. Please contact the system administrator.'), 'error');
    return FALSE;
  }
  $datatrans = $_POST;

  // check the hmac for security level 2
  if ($payment_method['settings']['security']['security_level'] == 2) {
    if ($payment_method['settings']['security']['use_hmac_2'])
      $key = pack("H*", $payment_method['settings']['security']['hmac_key_2']);
    else
      $key = pack("H*", $payment_method['settings']['security']['hmac_key']);
    $sign = hash_hmac('md5', $payment_method['settings']['merchant_id'] . $datatrans['amount'] . $datatrans['currency'] . $datatrans['uppTransactionId'], $key);
    if ($sign != $datatrans['sign2']) {
      drupal_set_message(t('Datatrans communication failure. Invalid data received from datatrans. Please contact the system administrator.'), 'error');
      return FALSE;
    }
  }

  if ($datatrans['status'] == 'error') {
    drupal_set_message(_commerce_datatrans_map_error_code($datatrans['errorCode']), 'error');
    return FALSE;
  }

  return TRUE;
}

/**
 * Payment method callback; submission callback for redirected payments.
 *
 * Upon return from a redirected payment service, this callback provides the
 * payment method an opportunity to perform any submission functions necessary
 * before the customer is redirected to checkout completion.
 *
 * @param $order
 *   The order object.
 * @param $payment_method
 *   The payment method array.
 */
function commerce_datatrans_redirect_form_submit($order, $payment_method) {
  if (empty($_POST)) {
    return;
  }
  _commerce_datatrans_transaction_save($payment_method, $order, $_POST, COMMERCE_PAYMENT_STATUS_SUCCESS);
}

function _commerce_datatrans_get_transaction($order, $create = TRUE) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('order_id', $order->order_id)
    ->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    return commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
  }
  elseif ($create) {
    // Create a new payment transaction for the order.
    return commerce_payment_transaction_new('commerce_datatrans', $order->order_id);
  }
  else
    return NULL;
}

function _commerce_datatrans_transaction_save($payment_method, $order, $data, $status) {

  $transaction = _commerce_datatrans_get_transaction($order);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $data['amount'];
  $transaction->currency_code = $data['currency'];
  $transaction->status = $status;
  $transaction->remote_id = $order->data['payment_redirect_key'];
  $transaction->payload[REQUEST_TIME] = $data;
  unset($transaction->data['error handled']);

  commerce_payment_transaction_save($transaction);
}

/**
 * Payment method callback: submit form.
 */
function commerce_datatrans_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  global $language;

  // Set default value to prevent errors.
  if (!array_key_exists('payment_mode', $payment_method['settings'])) {
    $payment_method['settings']['payment_mode'] = 'redirect';
  }

  if ($payment_method['settings']['payment_mode'] == 'lightbox') {

    if (!_commerce_datatrans_settings_ok($payment_method['settings'])) {
      return;
    }

    // On payment success, update transaction details and order status.
    if (isset($_POST['status']) && $_POST['status'] == 'success' && $order->data['payment_redirect_key'] == arg(3)) {
      // @todo Instance ID is missing for some reason!
      $payment_method['instance_id'] = 'commerce_datatrans|commerce_payment_commerce_datatrans';

      // Transaction save.
      _commerce_datatrans_transaction_save($payment_method, $order, $_POST, COMMERCE_PAYMENT_STATUS_SUCCESS);

      // Update order status.
      $order->status = 'checkout_complete';
      commerce_order_save($order);
    }

    // Show error message if payment fails.
    if (isset($_POST['status']) && $_POST['status'] == 'error') {
      watchdog('commerce_datatrans', 'An error occurred while settling the payment: @error.', array('@error' => $_POST['errorDetail']), WATCHDOG_ERROR);
      drupal_set_message(t('An error occurred while settling the payment: @error.', array('@error' => $_POST['errorDetail'])), 'error');
    }

    // Check order status in order to know whether to display Pay button or not.
    if (in_array($order->status, array('checkout_checkout', 'checkout_review', 'checkout_payment'))) {

      // Update payment redirect key.
      if (!array_key_exists('payment_redirect_key', $order->data)) {
        $order->data['payment_redirect_key'] = drupal_hash_base64(time() . uniqid());
        commerce_order_save($order);
      }

      // Get order total.
      $total = field_get_items('commerce_order', $order, 'commerce_order_total');

      // Get sign string.
      $sign = FALSE;
      switch ($payment_method['settings']['security']['security_level']) {
        case 1:
          $sign = $payment_method['settings']['security']['merchant_control_constant'];
          break;
        case 2:
          $sign = hash_hmac('md5', $payment_method['settings']['merchant_id'] . $total[0]['amount'] . $total[0]['currency_code'] . $order->order_id, pack("H*", $payment_method['settings']['security']['hmac_key']));
          break;
      }

      // Pay button.
      $form['pay'] = array(
        '#type'       => 'submit',
        '#value'      => t('Pay with Datatrans'),
        '#prefix'     => '<div class="checkout-buttons">',
        '#suffix'     => '</div>',
        '#attributes' => array(
          'id'               => 'paymentButton',
          'class'            => array('checkout-continue'),
          'data-merchant-id' => $payment_method['settings']['merchant_id'],
          'data-amount'      => $total[0]['amount'],
          'data-currency'    => $total[0]['currency_code'],
          'data-refno'       => $order->order_id,
          'data-language'    => $language->language,
          'data-success-url' => url('checkout/' . $order->order_id . '/review/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
          'data-error-url'   => url('checkout/' . $order->order_id . '/review/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
          'data-cancel-url'  => url('checkout/' . $order->order_id . '/review/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),
          'data-sign'        => $sign,
        ),
        '#attached'   => array(
          'js' => array(
            array(
              'data' => 'https://code.jquery.com/jquery-1.11.2.min.js',
              'type' => 'external',
            ),
            array(
              'data' => 'https://pilot.datatrans.biz/upp/payment/js/datatrans-1.0.0.js',
              'type' => 'external',
            ),
            array(
              'data'  => '$("#paymentButton").click(function () {$("form").submit(function (e) {e.preventDefault();}); Datatrans.startPayment({"form": "#paymentButton"});});',
              'type'  => 'inline',
              'scope' => 'footer',
            ),
          ),
        ),
      );

      return $form;
    }
    else {
      drupal_set_message(t('Payment is successful. Please proceed to the next step.'));
    }
  }
}

/**
 * Payment method callback: submit form validate.
 */
function commerce_datatrans_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {
  if ($order->status != 'checkout_complete' && $payment_method['settings']['payment_mode'] == 'lightbox') {
    form_set_error('commerce_payment', t('Please click on @pay button in order to proceed.', array('@pay' => t('Pay with Datatrans'))));
    return FALSE;
  }
}

/**
 * Error code mapping.
 */
function _commerce_datatrans_map_error_code($code) {
  switch ($code) {
    case '1001':
      $message = t('Datrans transaction failed: missing required parameter.');
      break;

    case '1002':
      $message = t('Datrans transaction failed: invalid parameter format.');
      break;

    case '1003':
      $message = t('Datatrans transaction failed: value of parameter not found.');
      break;

    case '1004':
    case '1400':
      $message = t('Datatrans transaction failed: invalid card number.');
      break;

    case '1007':
      $message = t('Datatrans transaction failed: access denied by sign control/parameter sign invalid.');
      break;

    case '1008':
      $message = t('Datatrans transaction failed: merchant disabled by Datatrans.');
      break;

    case '1401':
      $message = t('Datatrans transaction failed: invalid expiration date.');
      break;

    case '1402':
    case '1404':
      $message = t('Datatrans transaction failed: card expired or blocked.');
      break;

    case '1403':
      $message = t('Datatrans transaction failed: transaction declined by card issuer.');
      break;

    case '1405':
      $message = t('Datatrans transaction failed: amount exceeded.');
      break;

    case '3000':
    case '3001':
    case '3002':
    case '3003':
    case '3004':
    case '3005':
    case '3006':
    case '3011':
    case '3012':
    case '3013':
    case '3014':
    case '3015':
    case '3016':
      $message = t('Datatrans transaction failed: denied by fraud management.');
      break;

    case '3031':
      $message = t('Datatrans transaction failed: declined due to response code 02.');
      break;

    case '3041':
      $message = t('Datatrans transaction failed: Declined due to post error/post URL check failed.');
      break;

    case '10412':
      $message = t('Datatrans transaction failed: PayPal duplicate error.');
      break;

    case '-885':
    case '-886':
      $message = t('Datatrans transaction failed: CC-alias update/insert error.');
      break;

    case '-887':
      $message = t('Datatrans transaction failed: CC-alias does not match with cardno.');
      break;

    case '-888':
      $message = t('Datatrans transaction failed: CC-alias not found.');

    case '-900':
      $message = t('Datatrans transaction failed: CC-alias service not enabled.');
      break;

    default:
      break;
      $message = t('Datatrans transaction failed: undefined error.');
      break;
  }

  return $message;
}

function _commerce_datatrans_settings_ok($settings) {

  $ok = TRUE;

  if (empty($settings['merchant_id'])) {
    drupal_set_message(t('Datatrans is not configured for use. No Merchant ID has been specified.'), 'error');
    $ok = FALSE;
  }

  switch ($settings['security']['security_level']) {
    case 1:
      if (empty($settings['security']['merchant_control_constant'])) {
        drupal_set_message(t('Please specify a merchant control constant for security level 1.'), 'error');
        $ok = FALSE;
      }
      break;
    case 2:
      if (empty($settings['security']['hmac_key'])) {
        drupal_set_message(t('Please specify a merchant control constant for security level 2.'), 'error');
        $ok = FALSE;
      }
      break;
  }

  return $ok;
}
